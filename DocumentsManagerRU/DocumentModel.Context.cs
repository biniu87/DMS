//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DocumentsManagerRU
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DocContext : DbContext
    {
        public DocContext()
            : base("name=DocContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Document_Class> Document_Class { get; set; }
        public virtual DbSet<Document_Permissions> Document_Permissions { get; set; }
        public virtual DbSet<Document_Settings> Document_Settings { get; set; }
        public virtual DbSet<Document_Definitions> Document_Definitions { get; set; }
        public virtual DbSet<Document_DataTypes_Enum> Document_DataTypes_Enum { get; set; }
        public virtual DbSet<Oznaczenia> Oznaczenia { get; set; }
        public virtual DbSet<Document_PermissionsTypes_Enum> Document_PermissionsTypes_Enum { get; set; }
        public virtual DbSet<Document_Security> Document_Security { get; set; }
        public virtual DbSet<Document_DefinitionList_Items> Document_DefinitionList_Items { get; set; }
        public virtual DbSet<Document_DefinitionPerClass> Document_DefinitionPerClass { get; set; }
        public virtual DbSet<Document_ListItems_Permissions> Document_ListItems_Permissions { get; set; }
    
        public virtual int DocumentClassInsert(string name, string nameRU, string description, string descriptionRU)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameRUParameter = nameRU != null ?
                new ObjectParameter("NameRU", nameRU) :
                new ObjectParameter("NameRU", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionRUParameter = descriptionRU != null ?
                new ObjectParameter("DescriptionRU", descriptionRU) :
                new ObjectParameter("DescriptionRU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentClassInsert", nameParameter, nameRUParameter, descriptionParameter, descriptionRUParameter);
        }
    
        public virtual int DocumentPermissionDelete(Nullable<int> security, Nullable<int> @class)
        {
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionDelete", securityParameter, classParameter);
        }
    
        public virtual int DocumentPermissionInsert(Nullable<int> security, Nullable<int> @class, Nullable<int> permission, Nullable<int> print, Nullable<int> save, Nullable<int> send, Nullable<int> m_highlight, Nullable<int> m_blackout, Nullable<int> m_note, Nullable<bool> ch_highlight, Nullable<bool> ch_blackout, Nullable<bool> ch_note, Nullable<bool> cs_mail, Nullable<bool> dc_release)
        {
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            var permissionParameter = permission.HasValue ?
                new ObjectParameter("permission", permission) :
                new ObjectParameter("permission", typeof(int));
    
            var printParameter = print.HasValue ?
                new ObjectParameter("print", print) :
                new ObjectParameter("print", typeof(int));
    
            var saveParameter = save.HasValue ?
                new ObjectParameter("save", save) :
                new ObjectParameter("save", typeof(int));
    
            var sendParameter = send.HasValue ?
                new ObjectParameter("send", send) :
                new ObjectParameter("send", typeof(int));
    
            var m_highlightParameter = m_highlight.HasValue ?
                new ObjectParameter("m_highlight", m_highlight) :
                new ObjectParameter("m_highlight", typeof(int));
    
            var m_blackoutParameter = m_blackout.HasValue ?
                new ObjectParameter("m_blackout", m_blackout) :
                new ObjectParameter("m_blackout", typeof(int));
    
            var m_noteParameter = m_note.HasValue ?
                new ObjectParameter("m_note", m_note) :
                new ObjectParameter("m_note", typeof(int));
    
            var ch_highlightParameter = ch_highlight.HasValue ?
                new ObjectParameter("ch_highlight", ch_highlight) :
                new ObjectParameter("ch_highlight", typeof(bool));
    
            var ch_blackoutParameter = ch_blackout.HasValue ?
                new ObjectParameter("ch_blackout", ch_blackout) :
                new ObjectParameter("ch_blackout", typeof(bool));
    
            var ch_noteParameter = ch_note.HasValue ?
                new ObjectParameter("ch_note", ch_note) :
                new ObjectParameter("ch_note", typeof(bool));
    
            var cs_mailParameter = cs_mail.HasValue ?
                new ObjectParameter("cs_mail", cs_mail) :
                new ObjectParameter("cs_mail", typeof(bool));
    
            var dc_releaseParameter = dc_release.HasValue ?
                new ObjectParameter("dc_release", dc_release) :
                new ObjectParameter("dc_release", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionInsert", securityParameter, classParameter, permissionParameter, printParameter, saveParameter, sendParameter, m_highlightParameter, m_blackoutParameter, m_noteParameter, ch_highlightParameter, ch_blackoutParameter, ch_noteParameter, cs_mailParameter, dc_releaseParameter);
        }
    
        public virtual ObjectResult<GetDocumentPermissionsForClass_Result> GetDocumentPermissionsForClass(Nullable<int> @class)
        {
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentPermissionsForClass_Result>("GetDocumentPermissionsForClass", classParameter);
        }
    
        public virtual ObjectResult<GetDocumentsClass_Result> GetDocumentsClass(string language, string securityObjects, Nullable<int> primaryAccess, Nullable<int> secondaryAccess)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var securityObjectsParameter = securityObjects != null ?
                new ObjectParameter("SecurityObjects", securityObjects) :
                new ObjectParameter("SecurityObjects", typeof(string));
    
            var primaryAccessParameter = primaryAccess.HasValue ?
                new ObjectParameter("PrimaryAccess", primaryAccess) :
                new ObjectParameter("PrimaryAccess", typeof(int));
    
            var secondaryAccessParameter = secondaryAccess.HasValue ?
                new ObjectParameter("SecondaryAccess", secondaryAccess) :
                new ObjectParameter("SecondaryAccess", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentsClass_Result>("GetDocumentsClass", languageParameter, securityObjectsParameter, primaryAccessParameter, secondaryAccessParameter);
        }
    
        public virtual int DocumentSettingInsert(string name, string value, string decription)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var decriptionParameter = decription != null ?
                new ObjectParameter("decription", decription) :
                new ObjectParameter("decription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentSettingInsert", nameParameter, valueParameter, decriptionParameter);
        }
    
        public virtual int DocumentSettingUpdate(string name, string value, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentSettingUpdate", nameParameter, valueParameter, descriptionParameter);
        }
    
        public virtual int DocumentClassUpdate(Nullable<int> id, string name, string nameRU, string description, string descriptionRU, Nullable<bool> active)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameRUParameter = nameRU != null ?
                new ObjectParameter("NameRU", nameRU) :
                new ObjectParameter("NameRU", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var descriptionRUParameter = descriptionRU != null ?
                new ObjectParameter("DescriptionRU", descriptionRU) :
                new ObjectParameter("DescriptionRU", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentClassUpdate", idParameter, nameParameter, nameRUParameter, descriptionParameter, descriptionRUParameter, activeParameter);
        }
    
        public virtual int DocumentClassDelete(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentClassDelete", classIdParameter);
        }
    
        public virtual int DocumentDefinitionDelete(Nullable<int> definitionId)
        {
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("definitionId", definitionId) :
                new ObjectParameter("definitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionDelete", definitionIdParameter);
        }
    
        public virtual int DocumentDefinitionInsert(string name_pl, string description_pl, string name_ru, string description_ru, Nullable<byte> datatype, string items)
        {
            var name_plParameter = name_pl != null ?
                new ObjectParameter("name_pl", name_pl) :
                new ObjectParameter("name_pl", typeof(string));
    
            var description_plParameter = description_pl != null ?
                new ObjectParameter("description_pl", description_pl) :
                new ObjectParameter("description_pl", typeof(string));
    
            var name_ruParameter = name_ru != null ?
                new ObjectParameter("name_ru", name_ru) :
                new ObjectParameter("name_ru", typeof(string));
    
            var description_ruParameter = description_ru != null ?
                new ObjectParameter("description_ru", description_ru) :
                new ObjectParameter("description_ru", typeof(string));
    
            var datatypeParameter = datatype.HasValue ?
                new ObjectParameter("datatype", datatype) :
                new ObjectParameter("datatype", typeof(byte));
    
            var itemsParameter = items != null ?
                new ObjectParameter("items", items) :
                new ObjectParameter("items", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionInsert", name_plParameter, description_plParameter, name_ruParameter, description_ruParameter, datatypeParameter, itemsParameter);
        }
    
        public virtual ObjectResult<GetDocumentDefinitions_Result> GetDocumentDefinitions(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentDefinitions_Result>("GetDocumentDefinitions", languageParameter);
        }
    
        public virtual int DocumentDefinitionUpdate(Nullable<int> definitionId, string name_pl, string description_pl, string name_ru, string description_ru, string items)
        {
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("definitionId", definitionId) :
                new ObjectParameter("definitionId", typeof(int));
    
            var name_plParameter = name_pl != null ?
                new ObjectParameter("name_pl", name_pl) :
                new ObjectParameter("name_pl", typeof(string));
    
            var description_plParameter = description_pl != null ?
                new ObjectParameter("description_pl", description_pl) :
                new ObjectParameter("description_pl", typeof(string));
    
            var name_ruParameter = name_ru != null ?
                new ObjectParameter("name_ru", name_ru) :
                new ObjectParameter("name_ru", typeof(string));
    
            var description_ruParameter = description_ru != null ?
                new ObjectParameter("description_ru", description_ru) :
                new ObjectParameter("description_ru", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("items", items) :
                new ObjectParameter("items", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionUpdate", definitionIdParameter, name_plParameter, description_plParameter, name_ruParameter, description_ruParameter, itemsParameter);
        }
    
        public virtual int GetDocumentDataTypes(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDocumentDataTypes", languageParameter);
        }
    
        public virtual int DocumentPermissionModify(Nullable<int> security, Nullable<int> @class, Nullable<int> permission, Nullable<int> print, Nullable<int> save, Nullable<int> send, Nullable<int> m_highlight, Nullable<int> m_blackout, Nullable<int> m_note, Nullable<bool> ch_highlight, Nullable<bool> ch_blackout, Nullable<bool> ch_note, Nullable<bool> cs_mail, Nullable<bool> dc_release, Nullable<int> insertMissedOnly)
        {
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            var permissionParameter = permission.HasValue ?
                new ObjectParameter("permission", permission) :
                new ObjectParameter("permission", typeof(int));
    
            var printParameter = print.HasValue ?
                new ObjectParameter("print", print) :
                new ObjectParameter("print", typeof(int));
    
            var saveParameter = save.HasValue ?
                new ObjectParameter("save", save) :
                new ObjectParameter("save", typeof(int));
    
            var sendParameter = send.HasValue ?
                new ObjectParameter("send", send) :
                new ObjectParameter("send", typeof(int));
    
            var m_highlightParameter = m_highlight.HasValue ?
                new ObjectParameter("m_highlight", m_highlight) :
                new ObjectParameter("m_highlight", typeof(int));
    
            var m_blackoutParameter = m_blackout.HasValue ?
                new ObjectParameter("m_blackout", m_blackout) :
                new ObjectParameter("m_blackout", typeof(int));
    
            var m_noteParameter = m_note.HasValue ?
                new ObjectParameter("m_note", m_note) :
                new ObjectParameter("m_note", typeof(int));
    
            var ch_highlightParameter = ch_highlight.HasValue ?
                new ObjectParameter("ch_highlight", ch_highlight) :
                new ObjectParameter("ch_highlight", typeof(bool));
    
            var ch_blackoutParameter = ch_blackout.HasValue ?
                new ObjectParameter("ch_blackout", ch_blackout) :
                new ObjectParameter("ch_blackout", typeof(bool));
    
            var ch_noteParameter = ch_note.HasValue ?
                new ObjectParameter("ch_note", ch_note) :
                new ObjectParameter("ch_note", typeof(bool));
    
            var cs_mailParameter = cs_mail.HasValue ?
                new ObjectParameter("cs_mail", cs_mail) :
                new ObjectParameter("cs_mail", typeof(bool));
    
            var dc_releaseParameter = dc_release.HasValue ?
                new ObjectParameter("dc_release", dc_release) :
                new ObjectParameter("dc_release", typeof(bool));
    
            var insertMissedOnlyParameter = insertMissedOnly.HasValue ?
                new ObjectParameter("insertMissedOnly", insertMissedOnly) :
                new ObjectParameter("insertMissedOnly", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionModify", securityParameter, classParameter, permissionParameter, printParameter, saveParameter, sendParameter, m_highlightParameter, m_blackoutParameter, m_noteParameter, ch_highlightParameter, ch_blackoutParameter, ch_noteParameter, cs_mailParameter, dc_releaseParameter, insertMissedOnlyParameter);
        }
    
        public virtual int DocumentPermissionsFillDefaultForClass(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionsFillDefaultForClass", classIdParameter);
        }
    
        public virtual int DocumentPermissionsFillDefaultFull()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionsFillDefaultFull");
        }
    
        public virtual int DocumentPermissionUpdate(Nullable<int> security, Nullable<int> @class, Nullable<int> permission, Nullable<int> print, Nullable<int> save, Nullable<int> send, Nullable<int> m_highlight, Nullable<int> m_blackout, Nullable<int> m_note, Nullable<bool> ch_highlight, Nullable<bool> ch_blackout, Nullable<bool> ch_note, Nullable<bool> cs_mail, Nullable<bool> dc_release)
        {
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            var permissionParameter = permission.HasValue ?
                new ObjectParameter("permission", permission) :
                new ObjectParameter("permission", typeof(int));
    
            var printParameter = print.HasValue ?
                new ObjectParameter("print", print) :
                new ObjectParameter("print", typeof(int));
    
            var saveParameter = save.HasValue ?
                new ObjectParameter("save", save) :
                new ObjectParameter("save", typeof(int));
    
            var sendParameter = send.HasValue ?
                new ObjectParameter("send", send) :
                new ObjectParameter("send", typeof(int));
    
            var m_highlightParameter = m_highlight.HasValue ?
                new ObjectParameter("m_highlight", m_highlight) :
                new ObjectParameter("m_highlight", typeof(int));
    
            var m_blackoutParameter = m_blackout.HasValue ?
                new ObjectParameter("m_blackout", m_blackout) :
                new ObjectParameter("m_blackout", typeof(int));
    
            var m_noteParameter = m_note.HasValue ?
                new ObjectParameter("m_note", m_note) :
                new ObjectParameter("m_note", typeof(int));
    
            var ch_highlightParameter = ch_highlight.HasValue ?
                new ObjectParameter("ch_highlight", ch_highlight) :
                new ObjectParameter("ch_highlight", typeof(bool));
    
            var ch_blackoutParameter = ch_blackout.HasValue ?
                new ObjectParameter("ch_blackout", ch_blackout) :
                new ObjectParameter("ch_blackout", typeof(bool));
    
            var ch_noteParameter = ch_note.HasValue ?
                new ObjectParameter("ch_note", ch_note) :
                new ObjectParameter("ch_note", typeof(bool));
    
            var cs_mailParameter = cs_mail.HasValue ?
                new ObjectParameter("cs_mail", cs_mail) :
                new ObjectParameter("cs_mail", typeof(bool));
    
            var dc_releaseParameter = dc_release.HasValue ?
                new ObjectParameter("dc_release", dc_release) :
                new ObjectParameter("dc_release", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionUpdate", securityParameter, classParameter, permissionParameter, printParameter, saveParameter, sendParameter, m_highlightParameter, m_blackoutParameter, m_noteParameter, ch_highlightParameter, ch_blackoutParameter, ch_noteParameter, cs_mailParameter, dc_releaseParameter);
        }
    
        public virtual ObjectResult<PobierzOznaczenia_Result> PobierzOznaczenia(Nullable<long> documentId, Nullable<int> classId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PobierzOznaczenia_Result>("PobierzOznaczenia", documentIdParameter, classIdParameter);
        }
    
        public virtual int WyczyscOznaczeniaZeSkanu(Nullable<long> documentId, Nullable<int> classId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WyczyscOznaczeniaZeSkanu", documentIdParameter, classIdParameter);
        }
    
        public virtual int ZapiszOznaczenie(Nullable<long> documentId, Nullable<int> classId, Nullable<int> typ, Nullable<int> strona, Nullable<int> pozycja, Nullable<double> left, Nullable<double> top, Nullable<double> width, Nullable<double> height, string text)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var typParameter = typ.HasValue ?
                new ObjectParameter("Typ", typ) :
                new ObjectParameter("Typ", typeof(int));
    
            var stronaParameter = strona.HasValue ?
                new ObjectParameter("Strona", strona) :
                new ObjectParameter("Strona", typeof(int));
    
            var pozycjaParameter = pozycja.HasValue ?
                new ObjectParameter("Pozycja", pozycja) :
                new ObjectParameter("Pozycja", typeof(int));
    
            var leftParameter = left.HasValue ?
                new ObjectParameter("Left", left) :
                new ObjectParameter("Left", typeof(double));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(double));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(double));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(double));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ZapiszOznaczenie", documentIdParameter, classIdParameter, typParameter, stronaParameter, pozycjaParameter, leftParameter, topParameter, widthParameter, heightParameter, textParameter);
        }
    
        public virtual int DocumentPermissionSimpleUpdate(Nullable<int> security, Nullable<int> @class, string field, string value)
        {
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionSimpleUpdate", securityParameter, classParameter, fieldParameter, valueParameter);
        }
    
        public virtual ObjectResult<GetDocumentClassPermission_Result> GetDocumentClassPermission(string security, Nullable<int> @class)
        {
            var securityParameter = security != null ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(string));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentClassPermission_Result>("GetDocumentClassPermission", securityParameter, classParameter);
        }
    
        public virtual ObjectResult<string> GetDocumentPath(Nullable<long> documentId, Nullable<int> classId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(long));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetDocumentPath", documentIdParameter, classIdParameter);
        }
    
        public virtual int DocumentSecurityDelete(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentSecurityDelete", nameParameter);
        }
    
        public virtual int DocumentSecurityInsert(string name, string description, Nullable<bool> active, Nullable<bool> admin, Nullable<bool> group)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var adminParameter = admin.HasValue ?
                new ObjectParameter("Admin", admin) :
                new ObjectParameter("Admin", typeof(bool));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentSecurityInsert", nameParameter, descriptionParameter, activeParameter, adminParameter, groupParameter);
        }
    
        public virtual int DocumentSecurityUpdate(string name, string description, Nullable<bool> active, Nullable<bool> admin)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var adminParameter = admin.HasValue ?
                new ObjectParameter("Admin", admin) :
                new ObjectParameter("Admin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentSecurityUpdate", nameParameter, descriptionParameter, activeParameter, adminParameter);
        }
    
        public virtual ObjectResult<GetDocumentPermissionsForSecurity_Result> GetDocumentPermissionsForSecurity(Nullable<int> security)
        {
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentPermissionsForSecurity_Result>("GetDocumentPermissionsForSecurity", securityParameter);
        }
    
        public virtual ObjectResult<GetDocumentSecurity_Result> GetDocumentSecurity(string groupTitle, string userTitle)
        {
            var groupTitleParameter = groupTitle != null ?
                new ObjectParameter("groupTitle", groupTitle) :
                new ObjectParameter("groupTitle", typeof(string));
    
            var userTitleParameter = userTitle != null ?
                new ObjectParameter("userTitle", userTitle) :
                new ObjectParameter("userTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentSecurity_Result>("GetDocumentSecurity", groupTitleParameter, userTitleParameter);
        }
    
        public virtual ObjectResult<GetClassPermissionsVector_Result> GetClassPermissionsVector(string securityObjects, Nullable<int> @class)
        {
            var securityObjectsParameter = securityObjects != null ?
                new ObjectParameter("SecurityObjects", securityObjects) :
                new ObjectParameter("SecurityObjects", typeof(string));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClassPermissionsVector_Result>("GetClassPermissionsVector", securityObjectsParameter, classParameter);
        }
    
        public virtual int DocumentDefinitionListItemsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionListItemsDelete", idParameter);
        }
    
        public virtual int DocumentDefinitionListItemsInsert(Nullable<int> definitionId, string name, Nullable<bool> active)
        {
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("definitionId", definitionId) :
                new ObjectParameter("definitionId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionListItemsInsert", definitionIdParameter, nameParameter, activeParameter);
        }
    
        public virtual int DocumentDefinitionListItemsUpdate(Nullable<int> id, Nullable<int> definitionId, string name, Nullable<bool> active)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("definitionId", definitionId) :
                new ObjectParameter("definitionId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionListItemsUpdate", idParameter, definitionIdParameter, nameParameter, activeParameter);
        }
    
        public virtual int DocumentDefinitionPerClassDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionPerClassDelete", idParameter);
        }
    
        public virtual int DocumentDefinitionPerClassInsert(Nullable<int> classId, Nullable<int> definitionId, Nullable<bool> required, Nullable<bool> active, string @default)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("definitionId", definitionId) :
                new ObjectParameter("definitionId", typeof(int));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("required", required) :
                new ObjectParameter("required", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var defaultParameter = @default != null ?
                new ObjectParameter("default", @default) :
                new ObjectParameter("default", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionPerClassInsert", classIdParameter, definitionIdParameter, requiredParameter, activeParameter, defaultParameter);
        }
    
        public virtual int DocumentListItemsPermissionsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentListItemsPermissionsDelete", idParameter);
        }
    
        public virtual int DocumentListItemsPermissionsInsert(Nullable<int> itemId, Nullable<int> classId, Nullable<int> securityId, Nullable<bool> permission)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var securityIdParameter = securityId.HasValue ?
                new ObjectParameter("securityId", securityId) :
                new ObjectParameter("securityId", typeof(int));
    
            var permissionParameter = permission.HasValue ?
                new ObjectParameter("permission", permission) :
                new ObjectParameter("permission", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentListItemsPermissionsInsert", itemIdParameter, classIdParameter, securityIdParameter, permissionParameter);
        }
    
        public virtual int DocumentListItemsPermissionsUpdate(Nullable<int> id, Nullable<bool> permission)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var permissionParameter = permission.HasValue ?
                new ObjectParameter("permission", permission) :
                new ObjectParameter("permission", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentListItemsPermissionsUpdate", idParameter, permissionParameter);
        }
    
        public virtual int DocumentPermissionsFillDefaultForSecurity(Nullable<int> security)
        {
            var securityParameter = security.HasValue ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentPermissionsFillDefaultForSecurity", securityParameter);
        }
    
        public virtual ObjectResult<GetDocumentDefinitionsForClass_Result> GetDocumentDefinitionsForClass(string language, Nullable<int> classId)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentDefinitionsForClass_Result>("GetDocumentDefinitionsForClass", languageParameter, classIdParameter);
        }
    
        public virtual ObjectResult<GetDocumentDefinitionsByDirective_Result> GetDocumentDefinitionsByDirective(string language, Nullable<int> classId, Nullable<int> directive)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var directiveParameter = directive.HasValue ?
                new ObjectParameter("directive", directive) :
                new ObjectParameter("directive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentDefinitionsByDirective_Result>("GetDocumentDefinitionsByDirective", languageParameter, classIdParameter, directiveParameter);
        }
    
        public virtual int DocumentDefinitionPerClassUpdate(Nullable<int> id, Nullable<bool> required, Nullable<bool> active, string @default)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var requiredParameter = required.HasValue ?
                new ObjectParameter("required", required) :
                new ObjectParameter("required", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var defaultParameter = @default != null ?
                new ObjectParameter("default", @default) :
                new ObjectParameter("default", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocumentDefinitionPerClassUpdate", idParameter, requiredParameter, activeParameter, defaultParameter);
        }
    
        public virtual ObjectResult<GetDocumentsClassByAssignedDefinition_Result> GetDocumentsClassByAssignedDefinition(string language, Nullable<int> definitionId)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("DefinitionId", definitionId) :
                new ObjectParameter("DefinitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentsClassByAssignedDefinition_Result>("GetDocumentsClassByAssignedDefinition", languageParameter, definitionIdParameter);
        }
    
        public virtual ObjectResult<GetDocumentListItemsPermissions_Result> GetDocumentListItemsPermissions(Nullable<int> definitionId, Nullable<int> classId, string security)
        {
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("definitionId", definitionId) :
                new ObjectParameter("definitionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var securityParameter = security != null ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentListItemsPermissions_Result>("GetDocumentListItemsPermissions", definitionIdParameter, classIdParameter, securityParameter);
        }
    
        public virtual ObjectResult<GetDocumentDefinitionListItems_Result> GetDocumentDefinitionListItems(Nullable<int> definitionId)
        {
            var definitionIdParameter = definitionId.HasValue ?
                new ObjectParameter("definitionId", definitionId) :
                new ObjectParameter("definitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentDefinitionListItems_Result>("GetDocumentDefinitionListItems", definitionIdParameter);
        }
    
        public virtual ObjectResult<GetDocumentListItemsPermissionsToSelect_Result> GetDocumentListItemsPermissionsToSelect(Nullable<int> classId, string security)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var securityParameter = security != null ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocumentListItemsPermissionsToSelect_Result>("GetDocumentListItemsPermissionsToSelect", classIdParameter, securityParameter);
        }
    
        public virtual int ACT_DeleteAssign(Nullable<long> documentId, Nullable<int> classId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACT_DeleteAssign", documentIdParameter, classIdParameter);
        }
    
        public virtual int ACT_UpdateAssign(Nullable<long> documentId, Nullable<int> classId, Nullable<long> newDocumentId, Nullable<int> newClassId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var newDocumentIdParameter = newDocumentId.HasValue ?
                new ObjectParameter("NewDocumentId", newDocumentId) :
                new ObjectParameter("NewDocumentId", typeof(long));
    
            var newClassIdParameter = newClassId.HasValue ?
                new ObjectParameter("NewClassId", newClassId) :
                new ObjectParameter("NewClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACT_UpdateAssign", documentIdParameter, classIdParameter, newDocumentIdParameter, newClassIdParameter);
        }
    
        public virtual int ACT_UpdateOznaczeniaId(Nullable<long> documentId, Nullable<int> classId, Nullable<long> newDocumentId, Nullable<int> newClassId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var newDocumentIdParameter = newDocumentId.HasValue ?
                new ObjectParameter("NewDocumentId", newDocumentId) :
                new ObjectParameter("NewDocumentId", typeof(long));
    
            var newClassIdParameter = newClassId.HasValue ?
                new ObjectParameter("NewClassId", newClassId) :
                new ObjectParameter("NewClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ACT_UpdateOznaczeniaId", documentIdParameter, classIdParameter, newDocumentIdParameter, newClassIdParameter);
        }
    
        public virtual int GetSecondaryDocuments(Nullable<int> classId, Nullable<long> documentId, string language)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(long));
    
            var languageParameter = language != null ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSecondaryDocuments", classIdParameter, documentIdParameter, languageParameter);
        }
    
        public virtual int GetDocumentClassPermission2(string security, Nullable<int> @class)
        {
            var securityParameter = security != null ?
                new ObjectParameter("security", security) :
                new ObjectParameter("security", typeof(string));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDocumentClassPermission2", securityParameter, classParameter);
        }
    
        public virtual int LOG_DodajLog(string typ, string login, string opis)
        {
            var typParameter = typ != null ?
                new ObjectParameter("typ", typ) :
                new ObjectParameter("typ", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var opisParameter = opis != null ?
                new ObjectParameter("opis", opis) :
                new ObjectParameter("opis", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LOG_DodajLog", typParameter, loginParameter, opisParameter);
        }
    
        public virtual int LOG_Dokument_DodajAktualizacje(Nullable<int> idKlasy, Nullable<long> idDokumentu, string kolumna, string staraWartosc, string nowaWartosc, string login)
        {
            var idKlasyParameter = idKlasy.HasValue ?
                new ObjectParameter("idKlasy", idKlasy) :
                new ObjectParameter("idKlasy", typeof(int));
    
            var idDokumentuParameter = idDokumentu.HasValue ?
                new ObjectParameter("idDokumentu", idDokumentu) :
                new ObjectParameter("idDokumentu", typeof(long));
    
            var kolumnaParameter = kolumna != null ?
                new ObjectParameter("kolumna", kolumna) :
                new ObjectParameter("kolumna", typeof(string));
    
            var staraWartoscParameter = staraWartosc != null ?
                new ObjectParameter("staraWartosc", staraWartosc) :
                new ObjectParameter("staraWartosc", typeof(string));
    
            var nowaWartoscParameter = nowaWartosc != null ?
                new ObjectParameter("nowaWartosc", nowaWartosc) :
                new ObjectParameter("nowaWartosc", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LOG_Dokument_DodajAktualizacje", idKlasyParameter, idDokumentuParameter, kolumnaParameter, staraWartoscParameter, nowaWartoscParameter, loginParameter);
        }
    
        public virtual int LOG_Dokument_DodajDostep(Nullable<int> idKlasy, Nullable<long> idDokumentu, string login)
        {
            var idKlasyParameter = idKlasy.HasValue ?
                new ObjectParameter("idKlasy", idKlasy) :
                new ObjectParameter("idKlasy", typeof(int));
    
            var idDokumentuParameter = idDokumentu.HasValue ?
                new ObjectParameter("idDokumentu", idDokumentu) :
                new ObjectParameter("idDokumentu", typeof(long));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LOG_Dokument_DodajDostep", idKlasyParameter, idDokumentuParameter, loginParameter);
        }
    }
}
